#!/bin/bash
# ---------------------------------------------------------------------------
# lshybrid - List devices in 45Drives Hybrid Chassis by their alias and physical location

# Copyright 2018, Brett Kelly <bkelly@45drives.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.############

############
## COLORS
RED='\033[0;31m'
GREEN='\033[0;32m'
LGREEN='\033[1;32m'
LGREY='\033[1;37m'
DGREY='\033[1;30m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
NC='\033[0m'
##

## FUNCTIONS
init(){
    DEVICE_PATH=$ALIAS_DEVICE_PATH
    CONFIG_PATH=$ALIAS_CONFIG_PATH
    if [ -z $DEVICE_PATH ] || [ -z $CONFIG_PATH ];then
	    echo "Both ALIAS_DEVICE_PATH and ALIAS_CONFIG_PATH must be defined"
	    exit 1
    fi
}
line() { # takes a number as first input Length, and any character as second input, defaults to "-" if no option
	if [ -z $2 ]; then
		printf -v line '%*s' "$1"
		echo ${line// /-}
	else
		printf -v line '%*s' "$1"
		echo ${line// /$2}
	fi		
}
setBAYstatus() {
	if [ ! -b $DEVICE_PATH/$DRIVE ];then
		printf -v absent "$DGREY%s$NC" ${BAY[$1]}  
		BAYSTATUS[$1]=$absent
	fi
	partcount=$((ls $DEVICE_PATH/ | grep -w ${BAY[$1]} | wc -l) 2>/dev/null)
	if [ "$partcount" -eq "1" ];then
		printf -v present "$YELLOW%s$NC" ${BAY[$1]}  	
		BAYSTATUS[$1]=$present
	elif [ "$partcount" -gt "1" ];then
		printf -v partition "$GREEN%s$NC" ${BAY[$1]} 	
		BAYSTATUS[$1]=$partition
	fi
}
setBAYstatusNC() {
	if [ ! -b $DEVICE_PATH/$DRIVE ];then
		printf -v absent "%-5s" ${BAY[$1]}
		BAYSTATUS[$1]=$absent
	fi
	partcount=$((ls $DEVICE_PATH/ | grep -w ${BAY[$1]} | wc -l) 2>/dev/null)
	if [ "$partcount" -eq "1" ];then
		printf -v present "*%-5s" ${BAY[$1]}  	
		BAYSTATUS[$1]=$present
	elif [ "$partcount" -gt "1" ];then
		printf -v partition "**%-5s" ${BAY[$1]} 	
		BAYSTATUS[$1]=$partition
	fi
}
getCARDname() {
    if [[ $(lspci | grep $R750) ]];then
        CARD="HighPoint R750"
        DRIVERVERSION=$(cat /proc/scsi/r750/* 2>/dev/null | awk 'NR==1{print $5}')
        OLD_MAP=yes #Default R750 to always use old mapping
    elif [[ $(lspci | grep $LSI_9201) ]];then
        CARD="LSI 9201-16i"
        DRIVERVERSION=$(modinfo mpt2sas | grep version | awk 'NR==1{print $2}')
    elif [[ $(lspci | grep $LSI_9305) ]];then
        CARD="LSI 9305-16i"
        DRIVERVERSION=$(modinfo mpt3sas | grep version | awk 'NR==1{print $2}')
    elif [[ $(lspci | grep $HBA1000) ]];then
        CARD="Adaptec HBA-1000i"
        DRIVERVERSION=$(rpm -qa | grep -i aacraid)
    fi
}
getBAY() {
    i=0
    j=3
    ## LOOP THROUGH BAYS
    while [ $i -lt $BAYS ];do
        bay=$(cat $CONFIG_PATH/vdev_id.conf | awk -v j=$j 'NR==j{print $2}')
        BAY[$i]=$bay
        let i=i+1
        let j=j+1
    done
}
getSTATUS() {
    for bay in "${BAY[@]}";do
        if [ $COLOR_FLAG == no ];then
		    setBAYstatusNC $b
	    else
	        setBAYstatus $b
        fi
        let b=b+1
    done
}
displayBAYS() {
    r=0
    case $HYBRID_SIZE in
    8)
        echo "8SSD BAYS"
        ;;
    16)
        line 24 _
        while [ $r -lt $ROWS ];do
            r_=$(($r * 15))
            if [ $r -eq $((ROWS -1)) ];then
                printf "|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\n" ROW$r \
                "${BAYSTATUS[$((0 + $r_))]}" "${BAYSTATUS[$((1 + $r_))]}" "${BAYSTATUS[$((2 + $r_))]}" "${BAYSTATUS[$((3 + $r_))]}" "${BAYSTATUS[$((4 + $r_))]}" \
                "${BAYSTATUS[$((5 + $r_))]}" "${BAYSTATUS[$((6 + $r_))]}" "${BAYSTATUS[$((7 + $r_))]}" "${BAYSTATUS[$((8 + $r_))]}" "${BAYSTATUS[$((9 + $r_))]}" \
                "${BAYSTATUS[$((10 + $r_))]}" "${BAYSTATUS[$((11 + $r_))]}" "${BAYSTATUS[$((12 + $r_))]}" "${BAYSTATUS[$((13 + $r_))]}" "${BAYSTATUS[$((14 + $r_))]}" \
                "${BAYSTATUS[$((15 + $r_))]}" "${BAYSTATUS[$((16 + $r_))]}" "${BAYSTATUS[$((17 + $r_))]}" "${BAYSTATUS[$((18 + $r_))]}" "${BAYSTATUS[$((19 + $r_))]}" \
                "${BAYSTATUS[$((20 + $r_))]}" "${BAYSTATUS[$((21 + $r_))]}"
            else
                printf "|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\n" ROW$r \
                "${BAYSTATUS[$((0 + $r_))]}" "${BAYSTATUS[$((1 + $r_))]}" "${BAYSTATUS[$((2 + $r_))]}" "${BAYSTATUS[$((3 + $r_))]}" "${BAYSTATUS[$((4 + $r_))]}" \
                "${BAYSTATUS[$((5 + $r_))]}" "${BAYSTATUS[$((6 + $r_))]}" "${BAYSTATUS[$((7 + $r_))]}" "${BAYSTATUS[$((8 + $r_))]}" "${BAYSTATUS[$((9 + $r_))]}" \
                "${BAYSTATUS[$((10 + $r_))]}" "${BAYSTATUS[$((11 + $r_))]}" "${BAYSTATUS[$((12 + $r_))]}" "${BAYSTATUS[$((13 + $r_))]}" "${BAYSTATUS[$((14 + $r_))]}" 
            fi
            let r=r+1
        done
        ;;
    32)
        line 24 _
        while [ $r -lt $ROWS ];do
            r_=$(($r * 15))
            if [ $r -eq $((ROWS -1)) ];then
                printf "|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\n" ROW$r \
                "${BAYSTATUS[$((0 + $r_))]}" "${BAYSTATUS[$((1 + $r_))]}" "${BAYSTATUS[$((2 + $r_))]}" "${BAYSTATUS[$((3 + $r_))]}" "${BAYSTATUS[$((4 + $r_))]}" \
                "${BAYSTATUS[$((5 + $r_))]}" "${BAYSTATUS[$((6 + $r_))]}" "${BAYSTATUS[$((7 + $r_))]}" "${BAYSTATUS[$((8 + $r_))]}" "${BAYSTATUS[$((9 + $r_))]}" \
                "${BAYSTATUS[$((10 + $r_))]}" "${BAYSTATUS[$((11 + $r_))]}" "${BAYSTATUS[$((12 + $r_))]}" "${BAYSTATUS[$((13 + $r_))]}" "${BAYSTATUS[$((14 + $r_))]}" \
                "${BAYSTATUS[$((15 + $r_))]}" "${BAYSTATUS[$((16 + $r_))]}" "${BAYSTATUS[$((17 + $r_))]}" "${BAYSTATUS[$((18 + $r_))]}" "${BAYSTATUS[$((19 + $r_))]}" \
                "${BAYSTATUS[$((20 + $r_))]}" "${BAYSTATUS[$((21 + $r_))]}" "${BAYSTATUS[$((22 + $r_))]}" "${BAYSTATUS[$((23 + $r_))]}" "${BAYSTATUS[$((24 + $r_))]}" \
                "${BAYSTATUS[$((25 + $r_))]}" "${BAYSTATUS[$((26 + $r_))]}" "${BAYSTATUS[$((27 + $r_))]}" "${BAYSTATUS[$((28 + $r_))]}" "${BAYSTATUS[$((29 + $r_))]}" \
                "${BAYSTATUS[$(( + $r_))]}" "${BAYSTATUS[$((31 + $r_))]}" 
            else
                printf "|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|\n" ROW$r \
                "${BAYSTATUS[$((0 + $r_))]}" "${BAYSTATUS[$((1 + $r_))]}" "${BAYSTATUS[$((2 + $r_))]}" "${BAYSTATUS[$((3 + $r_))]}" "${BAYSTATUS[$((4 + $r_))]}" \
                "${BAYSTATUS[$((5 + $r_))]}" "${BAYSTATUS[$((6 + $r_))]}" "${BAYSTATUS[$((7 + $r_))]}" "${BAYSTATUS[$((8 + $r_))]}" "${BAYSTATUS[$((9 + $r_))]}" \
                "${BAYSTATUS[$((10 + $r_))]}" "${BAYSTATUS[$((11 + $r_))]}" "${BAYSTATUS[$((12 + $r_))]}" "${BAYSTATUS[$((13 + $r_))]}" "${BAYSTATUS[$((14 + $r_))]}" 
            fi
            let r=r+1
        done
        ;;
    *)
    	echo "Error: Either HYBRID_SIZE is no set correctly (see /etc/profile.d/alias.sh) or this is not a hyrbid chassis
	;;
    esac
}

## VARIBLES
R750="0750"
LSI_9201="2116"
LSI_9305="3224"
ASR="Adaptec"
HBA1000="Adaptec Series 8"
R3740="3740"
COLOR_FLAG=yes
OLD_MAP=no

## USER INPUT
while getopts 'onh' OPTION; do
	case ${OPTION} in
	n)
		COLOR_FLAG=no
		;;
	o)
		OLD_MAP=yes
		;;
	esac
done

# MAIN
init
BAYS=$((cat $CONFIG_PATH/vdev_id.conf| awk "NR>2" | wc -l) 2>/dev/null)
getCARDname
getBAY
getSTATUS

# DISPLAY
printf "| %s %s %s %s |\n" Disk Controller: $CARD DriverVersion: $DRIVERVERSION 
case $BAYS in
15)
    ROWS=1
    displayBAYS
30)
    ROWS=2
    displayBAYS
    ;;
45)
    ROWS=3
    displayBAYS
	;;
60)
    ROWS=4
    displayBAYS
	;;
*)
	echo -e "\nError!\n\tUnable to Display Drive Map\n\tConfigure Drive Aliasing\n"
	;;
esac
