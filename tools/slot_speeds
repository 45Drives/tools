#!/usr/bin/env bash

usage() {
    local exit_code=$1
    [ -z "$exit_code" ] && exit_code=0
    printf 'Usage: %s slot_speeds [ -j ]\n' "$0"
    echo
    echo 'Options:'
    echo '  -j - Print JSON formatted output'
    exit "$exit_code"
}

JSON=false

while getopts 'hj' opt; do
    case $opt in
    h)
        usage 0
        ;;
    j)
        JSON=true
        ;;
    *)
        printf "Unknown flag: %s\n" "$opt" >&2
        usage 2 >&2
        ;;
    esac
done
shift $((OPTIND - 1))

# shellcheck source=../ubm/ubm_funcs.sh
source "$(dirname -- "$(readlink -f -- "${BASH_SOURCE[0]}")")/../ubm/ubm_funcs.sh"

SLOT_NAME_LUT=$(all_slot_names | jq -R '[ split(" ") | .[] | select(length > 0) ]')

ALL_SLOT_SPEEDS_JSON=$(
    set -o pipefail
    storcli2 /call/eall/sall show all J | jq -re '
    [
        # keep only controller responses with "Drives List" in output
        .Controllers[] | select(."Response Data"."Drives List") |
        # inject controller number into each element of "Drives List"
        (."Command Status"."Controller" | tonumber) as $controller_num |
        # expand "Drives List" for transformation
        ."Response Data"."Drives List"[] |
        # transform each element of "Drives List"
        {
            slot_num: ."Drive Information"."EID:Slt" | split (":")[1] | tonumber,
            enclosure_id: ."Drive Information"."EID:Slt" | split (":")[0] | tonumber,
            controller_num: $controller_num,
            type: ( ."Drive Information"."Intf" // "-"  | gsub("\\s*$"; "")),
            width: ( ."Drive Detailed Information"."Negotiated Link Width" // "-" ),
            width_max: ( ."Drive Detailed Information"."Capable Link Width" // "-" ),
            rate: [."Drive Detailed Information"."Path Information"[] | ."Negotiated Speed" // ."NegotiatedSpeed" // "-"] | join(","),
            rate_max: ( ."Drive Detailed Information"."Capable Speed" // "-" ),
            model: ( ."Drive Detailed Information"."Model" // "-" | gsub("\\s*$"; "")),
            firmware_rev: ( ."Drive Detailed Information"."Firmware Revision Level" // "-" | gsub("\\s*$"; "")),
            state: ( ."Drive Information"."State" // "-" ),
            status: ( ."Drive Information"."Status" // "-" ),
            dev_path: ( ."Drive Detailed Information"."OS Drive Name" // "-" )
        } |
        . + { slot_name: ( '"$SLOT_NAME_LUT"'[.slot_num] // "-" ) } |
        . + { storcli_path: ("/c" + (.controller_num | tostring) + "/e" + (.enclosure_id | tostring) + "/s" + (.slot_num | tostring)) }
    ] | sort_by(.slot_num)
'
) || {
    EXIT_CODE=$?
    echo "Error: failed to get slot info ($EXIT_CODE)" >&2
    exit $EXIT_CODE
}

if $JSON; then
    echo "$ALL_SLOT_SPEEDS_JSON"
    exit 0
fi

(
    echo -e "Slot Num\tSlot Name\tStorcli2 Path\tType\tWidth\tMax Width\tRate\tMax Rate\tModel\tFW Rev\tState\tStatus\tDevice Path"
    jq -re '
    .[] | [ .slot_num, .slot_name, .storcli_path, .type, .width, .width_max, .rate, .rate_max, .model, .firmware_rev, .state, .status, .dev_path ] | @tsv
    ' <<<"$ALL_SLOT_SPEEDS_JSON"
) | column -s $'\t' -t
