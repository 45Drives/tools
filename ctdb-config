#!/bin/bash

# ctdb-config
# generates ctdb config files based on user input.
# required shared storage mounted permanently on each node
 

# Copyright 2017, Brett Kelly <bkelly@45drives.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

usage() { 
        cat << EOF
Usage: ctdb-config [-hd] 
		Generates ctdb config files based on user input.
		Shared storage mounted permanently on each node is required.
		Default location is "/mnt/ctdb"
			[-d] Specify shared storage directory
			[-g] gdeploy mode. does not prompt for nodes, VIP input
			[-m] Protocol CTDB manages (smb,nfs,both)
			[-w] CTDB manages winbind. does nothing if not using smb
EOF
        exit 0
}
linkcheck() { 
i=1
for nic in ${NIC[*]};do
	echo $i $(echo ${LINKSTATE[@]} | awk -v i="$i" '{print i}')
	if [ "${LINKSTATE[$i]}" == "no" ];then
		#echo "exclude" $i ${LINKSTATE[$i]}
		EXCLUDE+=("$nic")
	fi
	let i=i+1
done
for del in ${EXCLUDE[*]};do
	NIC=("${NIC[@]/$del/}")
done
}

getNIC() {
for n in $(ls $NICdir); do
	if [ -d $NICdir$n ] && [ "$n" != "lo" ];then
		NIC+=("$n")
	fi
done
}
getLINKSTATE() {
nic=$1;
LINKSTATE=$(ethtool $nic | grep "Link detected:" | cut -d ":" -f2)
}
writeCTDB() {
if [ -f $SHAREDDIR"ctdb" ];then
	cp $SHAREDDIR"ctdb" $SHAREDDIR"ctdb"".back"
	rm -f $SHAREDDIR"ctdb"
fi
touch $SHAREDDIR"ctdb"

echo "CTDB_RECOVERY_LOCK=$SHAREDDIR$LOCKFILE" >> $SHAREDDIR"ctdb"
echo "CTDB_NODES=/etc/ctdb/nodes" >> $SHAREDDIR"ctdb"
echo "CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses" >> $SHAREDDIR"ctdb"

if [ -z $PROTOCOL ];then
	read -p "CTDB manages SMB,NFS or BOTH: " PROTOCOL
fi
case $PROTOCOL in
SMB|smb)
	echo "CTDB_MANAGES_SAMBA=yes" >> $SHAREDDIR"ctdb"
	echo "CTDB_SAMBA_SKIP_SHARE_CHECK=yes" >> $SHAREDDIR"ctdb"
	if [ -z $WINBIND ];then
		read -p "CTDB manages winbind?(y/n) " WINBIND
	fi	
	case $WINBIND in
	y)
		echo "CTDB_MANAGES_WINBIND=yes" >> $SHAREDDIR"ctdb"
		;;
	n)
		:
		;;
	esac
	;;
NFS|nfs)
	echo "CTDB_MANAGES_NFS=yes" >> $SHAREDDIR"ctdb"
	;;
BOTH|b)
	echo "CTDB_MANAGES_SAMBA=yes" >> $SHAREDDIR"ctdb"
	echo "CTDB_SAMBA_SKIP_SHARE_CHECK=yes" >> $SHAREDDIR"ctdb"
	echo "CTDB_MANAGES_NFS=yes" >> $SHAREDDIR"ctdb"
	;;
esac

echo "CTDB_SET_MonitorInterval=5" >> $SHAREDDIR"ctdb" 
echo "CTDB_SET_TakeoverTimeout=5" >> $SHAREDDIR"ctdb"
echo "CTDB_SET_ElectionTimeout=2" >> $SHAREDDIR"ctdb"
echo "CTDB_SET_KeepaliveLimit=3" >> $SHAREDDIR"ctdb"
echo "CTDB_SET_KeepaliveInterval=1" >> $SHAREDDIR"ctdb"
echo "CTDB_SET_ControlTimeout=15" >> $SHAREDDIR"ctdb"


}
commitCTDB() {
if [ -f "/etc/sysconfig/ctdb" ];then
	rm -f "/etc/sysconfig/ctdb"
fi
cp $SHAREDDIR"ctdb" "/etc/sysconfig/ctdb"
}
writeNODES(){
if [ -f $SHAREDDIR"nodes" ];then
	cp $SHAREDDIR"nodes" $SHAREDDIR"nodes"".back"
	rm -f $SHAREDDIR"nodes"
fi
touch $SHAREDDIR"nodes"

read -p "Enter the number of nodes in cluster: " NODECOUNT
i=0
while [ $i -lt $NODECOUNT ];do
	read -p "Node_$i IP: " N
	echo "$N" >> $SHAREDDIR"nodes"
	let i=i+1
done
}
commitNODES() {
if [ -f $CTDBDIR"nodes" ];then
	rm -f $CTDBDIR"nodes"
fi
cp $SHAREDDIR"nodes" $CTDBDIR
}
writeVIP() {
if [ -f $SHAREDDIR"public_addresses" ];then
	cp $SHAREDDIR"public_addresses" $SHAREDDIR"public_addresses"".back"
	rm -f $SHAREDDIR"public_addresses"
fi
touch $SHAREDDIR"public_addresses"

read -p "VIP Address: " VIP
read -p "Subnet: (bitmask) " SUBNET
echo Network Interfaces:${NIC[*]}
read -p "Interface to host VIP: " INTERFACE
echo "$VIP"/"$SUBNET $INTERFACE" >> $SHAREDDIR"public_addresses"
read -p "Enter another VIP? (y/[n]) " con
case $con in
y)
	read -p "VIP Address: " VIP
	read -p "Subnet: (bitmask) " SUBNET
	echo Network Interfaces:${NIC[*]}
	read -p "Interface to host VIP: " INTERFACE
	echo "$VIP/$SUBNET $INTERFACE" >> $SHAREDDIR"public_addresses"
	;;
*)
	;;
esac
}
commitVIP() {
if [ -f $CTDBDIR"public_addresses" ];then
	rm -f $CTDBDIR"public_addresses"
fi
cp $SHAREDDIR"public_addresses" $CTDBDIR
}

# CONFIG
NICdir="/sys/class/net/"
SHAREDDIR="/mnt/ctdb/" 
LOCKFILE=".ctdb-lockfile"
CTDBDIR="/etc/ctdb/"
GDEPLOY_MODE="no"

while getopts 'hgd:m:w' OPTION; do
	case ${OPTION} in
	d)
		SHAREDDIR=${OPTARG}
		;;
	g)
		GDEPLOY_MODE=yes
		;;
	m)
		PROTOCOL=${OPTARG}
		;;
	w)
		WINBIND=y
		;;
	h)
		usage
		;;
	esac
done


#MAIN
getNIC

# Create lockfile
touch $SHAREDDIR$LOCKFILE

## Confiure CTDB config file
writeCTDB
commitCTDB

if [ $GDEPLOY_MODE == no ];then
	## Configure nodes file
	writeNODES
	commitNODES

	## Configure public Addresses file
	writeVIP
	commitVIP
	
fi

#systemctl restart ctdb
#IF SMB_FLAG =yes
## Configure SMB as to get share up at minimum

# HAVE SOME SORT OF VERIFCATION. (try to emulate testparm)
#-CHECK THAT EACH FILE IS EXISTS
#-CHECK FOR LOCKFILE
#....

# IF passed verifatcion say good to go and offer to start service or to do it later theselves and go in for fine tuning (i,e failover options, )
