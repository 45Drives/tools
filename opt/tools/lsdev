#!/usr/bin/env python3
# --------------------------------------------------------------------
# lsdev - List devices in the system by their alias
#
# Copyright (C) 2020, Josh Boudreau <jboudreau@45drives.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# --------------------------------------------------------------------


import json
import re
import os.path

CONFIG_PATH = "/etc"
DEVICE_PATH = "/dev"

# bay declaration. Append bay.copy() to lists
bay = {
    "occupied": "false",
    "partitions": "0",
    "dev-by-path": "",
    "dev": "",
    "bay-id": ""
}

server = [[]]; # server[row][bay]

def count_partitions(path):
    partitions = open("/proc/partitions", mode='r')
    blk_name = os.path.basename(path)
    return len(re.findall(blk_name + "\d{1,2}",partitions.read(),re.MULTILINE))

# initialize server[rows][bays]

vdev_id = open(CONFIG_PATH + "/vdev_id.conf", mode='r')

row_index = 0

for line in vdev_id:
    # skip blank lines and comments
    if not line or line[0] == '#':
        continue
    
    regex = re.search("^alias (\d{1,2})-(\d{1,2})\s+(.*)$",line)
    
    new_row_index = int(regex.group(1))
    new_bay_index = int(regex.group(2))
     
    if new_row_index > row_index:
        row_index = new_row_index
        server.append([]); # insert new row
    
    # process bay
    bay["dev-by-path"] = regex.group(3) # third capture group
    bay["bay-id"] = str(new_row_index) + "-" + str(new_bay_index)
    # if symlink exists in /dev/disk/by-path/ then bay is occupied
    if os.path.isfile(bay["dev-by-path"]): 
        bay["occupied"] = "true"
        bay["dev"] = os.path.realpath(bay["dev-by-path"])
        bay["partitions"] = count_partitions(bay["dev"]).str()
    else:
        bay["occupied"] = "false"
        bay["dev"] = ""
        bay["partitions"] = "0"
    
    server[row_index-1].append(bay.copy());

vdev_id.close()
print(json.dumps(server, indent = 4))
