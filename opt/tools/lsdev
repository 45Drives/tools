#!/usr/bin/env python3
# --------------------------------------------------------------------
# lsdev - List devices in the system by their alias
#
# Copyright (C) 2020, Josh Boudreau <jboudreau@45drives.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# --------------------------------------------------------------------


import json
import re
import os

CONFIG_PATH = "/etc"
DEVICE_PATH = "/dev"

def count_partitions(path):
    partitions = open("/proc/partitions", mode='r')
    blk_name = os.path.basename(path)
    return len(re.findall(blk_name + "\d{1,2}",partitions.read(),re.MULTILINE))

def smartctl(drive):
    output = json.loads(os.popen("smartctl -a " + drive["dev"] + " --json").read())
    print(json.dumps(output))

# initialize server[rows][bays]
def build_server():
    # bay declaration. Append bay.copy() to lists
    bay = {
        "dev-by-path": "",
        "bay-id": "",
        "occupied": "false",
        "dev": "",
        "partitions": "",
        "model": "",
        "serial": "",
        "capacity": "",
        "firm-ver": "",
        "rotation-rate": ""
    }
    server = [[]]; # server[row][bay]
    vdev_id = open(CONFIG_PATH + "/vdev_id.conf", mode='r')
    row_index = 1
    for line in vdev_id:
        # skip blank lines and comments
        if not line or line[0] == '#':
            continue
        # extract bay indices and by-path path
        regex = re.search("^alias (\d{1,2})-(\d{1,2})\s+(.*)$",line)
        new_row_index = int(regex.group(1))
        new_bay_index = int(regex.group(2))
        # new row
        if new_row_index > row_index:
            row_index = new_row_index
            server.append([]); # insert new row
        # process bay
        bay["dev-by-path"] = regex.group(3) # third capture group
        bay["bay-id"] = str(new_row_index) + "-" + str(new_bay_index)
        # if symlink exists in /dev/disk/by-path/ then bay is occupied
        if os.path.islink(bay["dev-by-path"]): 
            bay["occupied"] = "true"
            bay["dev"] = os.path.realpath(bay["dev-by-path"])
            bay["partitions"] = str(count_partitions(bay["dev"]))
            smartctl(bay) # get metadata
        else:
            bay["occupied"] = "false"
            bay["dev"] = ""
            bay["partitions"] = ""
            bay["model"] = ""
            bay["serial"] = ""
            bay["capacity"] = ""
            bay["firm-ver"] = ""
            bay["rotation-rate"] = ""
        # insert copy of bay
        server[row_index-1].append(bay.copy());
    vdev_id.close()
    return server

def main():
    server = {
        "bays": build_server(),
        "meta": "test"
    }
    print(json.dumps(server, indent = 4))

if __name__ == "__main__":
    main()
