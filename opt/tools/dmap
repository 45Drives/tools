#!/usr/bin/env python3
################################################################################
# dmap - used to create /etc/vdev_id.conf for 45Drives storage servers
#
# Copyright (C) 2020, Josh Boudreau <jboudreau@45drives.com>
#                     Mark Hooper   <mhooper@45drives.com>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TODO: comments explaning which cards show up lspci 
################################################################################

################################################################################
# dmap is used to create /etc/vdev_id.conf 

######################### EXAMPLE /etc/vdev_id.conf ############################
#alias 1-1     /dev/disk/by-path/pci-0000:03:00.0-sas-phy2-lun-0
#alias 1-2     /dev/disk/by-path/pci-0000:03:00.0-sas-phy3-lun-0
#alias 1-3     /dev/disk/by-path/pci-0000:03:00.0-sas-phy1-lun-0
#alias 1-4     /dev/disk/by-path/pci-0000:03:00.0-sas-phy0-lun-0
#alias 1-5     /dev/disk/by-path/pci-0000:03:00.0-sas-phy6-lun-0
#alias 1-6     /dev/disk/by-path/pci-0000:03:00.0-sas-phy7-lun-0
#alias 1-7     /dev/disk/by-path/pci-0000:03:00.0-sas-phy5-lun-0
#alias 1-8     /dev/disk/by-path/pci-0000:03:00.0-sas-phy4-lun-0
#alias 1-9     /dev/disk/by-path/pci-0000:03:00.0-sas-phy18-lun-0
#alias 1-10     /dev/disk/by-path/pci-0000:03:00.0-sas-phy19-lun-0
#alias 1-11     /dev/disk/by-path/pci-0000:03:00.0-sas-phy17-lun-0
#alias 1-12     /dev/disk/by-path/pci-0000:03:00.0-sas-phy16-lun-0
#alias 1-13     /dev/disk/by-path/pci-0000:03:00.0-sas-phy22-lun-0
#alias 1-14     /dev/disk/by-path/pci-0000:03:00.0-sas-phy23-lun-0
#alias 1-15     /dev/disk/by-path/pci-0000:03:00.0-sas-phy21-lun-0
#alias 2-1     /dev/disk/by-path/pci-0000:04:00.0-sas-phy2-lun-0
#alias 2-2     /dev/disk/by-path/pci-0000:04:00.0-sas-phy3-lun-0
#alias 2-3     /dev/disk/by-path/pci-0000:04:00.0-sas-phy1-lun-0
#alias 2-4     /dev/disk/by-path/pci-0000:04:00.0-sas-phy0-lun-0
#alias 2-5     /dev/disk/by-path/pci-0000:04:00.0-sas-phy6-lun-0
#alias 2-6     /dev/disk/by-path/pci-0000:04:00.0-sas-phy7-lun-0
#alias 2-7     /dev/disk/by-path/pci-0000:04:00.0-sas-phy5-lun-0
#alias 2-8     /dev/disk/by-path/pci-0000:04:00.0-sas-phy4-lun-0
#alias 2-9     /dev/disk/by-path/pci-0000:04:00.0-sas-phy18-lun-0
#alias 2-10     /dev/disk/by-path/pci-0000:04:00.0-sas-phy19-lun-0
#alias 2-11     /dev/disk/by-path/pci-0000:04:00.0-sas-phy17-lun-0
#alias 2-12     /dev/disk/by-path/pci-0000:04:00.0-sas-phy16-lun-0
#alias 2-13     /dev/disk/by-path/pci-0000:04:00.0-sas-phy22-lun-0
#alias 2-14     /dev/disk/by-path/pci-0000:04:00.0-sas-phy23-lun-0
#alias 2-15     /dev/disk/by-path/pci-0000:04:00.0-sas-phy21-lun-0"

# an example formatted string that can be used to make the required entries:
#"alias {bay}     {dev_path}/disk/by-path/pci-0000:{pci_slot}-sas-phy{lut}-lun-0".format(bay="",dev_path="",pci_slot="",lut="")


import re
import subprocess
import os

# a look up table used to ensure that the physical path is assigned in
# the correct order for each hba card that we use. The keys are 
# set so that they match the output from lspci.
lut = {
	"SAS3224": [2,3,1,0,6,7,5,4,18,19,17,16,22,23,21,20] # PCI Card - 9305-16
	}
	
controller_types = lut.keys()
	
def get_controller_types():
# lspci - get the controller type, and the order in which cards are installed
	controllers = []
	try:
		lspci_result = subprocess.Popen(["lspci"], stdout=subprocess.PIPE,
			universal_newlines=True).stdout
	except OSError:
		print("Error executing lspci.")
		exit(1)
	for line in lspci_result:
		for key in controller_types:
			regex = re.search("^(\S+).*{hba}.*$".format(hba=key),line)
			if regex != None:
				controllers.append((regex.group(1),key))
	return controllers
				
def get_chassis_size():
	# ipmitool fru - to get the chassis size (get user to put it in if unsuccessful)
	chassis_size = 0
	try:
		ipmitool_result = subprocess.Popen(["ipmitool","fru"], stdout=subprocess.PIPE,
			universal_newlines=True).stdout
	except OSError:
		print("Error executing ipmitool.")
		exit(1)
	for line in ipmitool_result:
			regex = re.search("^\s+Product Part Number\s+:\s+\w{0,2}(\d{2})\w?$",line)
			if regex != None:
				chassis_size = int(regex.group(1))
				return chassis_size
	return chassis_size


def get_path_variables():
	# get the alias config path, if it fails assume /etc/
	# get the device path, if it fails assume /dev/
	conf_path = os.getenv('ALIAS_CONFIG_PATH')
	if conf_path == None:
		conf_path = "/etc/"
	dev_path = os.getenv('ALIAS_DEVICE_PATH')
	if dev_path == None:
		dev_path = "/dev/"
	return conf_path, dev_path


def main():
	controller_types = get_controller_types()
	chassis_size = get_chassis_size()
	conf_path, dev_path = get_path_variables()
	for controller in controller_types:
		print("CONTROLLERS: ",controller[0],controller[1])
	print("CHASSIS SIZE: ",chassis_size)
	print("CONFIG PATH: ",conf_path)
	print("DEVICE PATH: ",dev_path)
	return 0

if __name__ == "__main__":
    main()
